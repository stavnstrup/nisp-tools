<?xml version="1.0" encoding="utf-8"?>
<project>
   <target name="resolve" depends="init, vol1.resolve, vol2.resolve, vol3.resolve"/>
   <target name="olinks" depends="init, vol1.olinks, vol2.olinks, vol3.olinks"/>
   <target name="html" depends="init, master, acronyms, vol1.html, vol2.html, vol3.html" description="* Create all HTML files destined for the web"/>
   <target name="pdf" depends="init, vol1.pdf, vol2.pdf, vol3.pdf, bigPDF" description="* Create a PDF version of NISP"/>
   <target name="copy.svg">
      <mkdir dir="${build.dir}/figures"/>
      <copy preservelastmodified="true" todir="${build.dir}/figures">
         <fileset dir="${src.dir}/figures/">
            <include name="*.svg"/>
            <exclude name="obsolete/*.svg"/>
         </fileset>
      </copy>
   </target>
   <target name="svg.required" depends="copy.svg">
      <uptodate property="svg.notRequired">
         <srcfiles includes="*.svg" dir="${build.dir}/figures"/>
         <mapper type="glob" from="*.svg" to="${build.dir}/figures/*.${nisp.image.ext}"/>
      </uptodate>
   </target>
   <target name="svg" depends="init, svg.required" unless="svg.notRequired">
      <echo message="Create figures for HTML (${dpi.raster} dpi)"/>
      <rasterize bg="255,255,255" result="${nisp.image.mimetype}" quality="${nisp.image.quality}" dpi="${dpi.raster}" destdir="${build.dir}/figures/">
         <fileset dir="${build.dir}/figures/">
            <include name="*.svg"/>
            <depend targetdir="${build.dir}/figures/">
               <mapper type="glob" from="*.svg" to="*.${nisp.image.ext}"/>
            </depend>
         </fileset>
      </rasterize>
   </target>
   <target name="getfigs" depends="svg">
      <copy preservelastmodified="true" todir="${build.dir}/htmlhelp/figures">
         <fileset dir="${build.dir}/figures">
            <include name="*.${nisp.image.ext}"/>
         </fileset>
      </copy>
   </target>
   <target name="bigPDF.required">
      <uptodate property="bigPDF.notRequired" targetfile="${build.dir}/pdf/NISP-v${src-version-major}${nisp.lifecycle.postfix}.pdf">
         <srcfiles includes="NISP-Vol*.pdf" dir="${build.dir}/pdf"/>
      </uptodate>
   </target>
   <target name="bigPDF" unless="bigPDF.notRequired" depends="vol1.pdf, vol2.pdf, vol3.pdf, bigPDF.required">
      <java classname="dk.stavnstrup.nisp.apps.MergePDF" fork="yes" dir="${build.fo}">
         <arg line="${tool-version} ${describe} NISP-v${src-version-major}${nisp.lifecycle.postfix}.pdf NISP-Vol1-v${src-version-major}${nisp.lifecycle.postfix}.pdf NISP-Vol2-v${src-version-major}${nisp.lifecycle.postfix}.pdf NISP-Vol3-v${src-version-major}${nisp.lifecycle.postfix}.pdf "/>
         <classpath refid="lib-fop-classpath"/>
      </java>
      <delete quiet="true" file="${build.fo}/CombinedPDFDocument.pdf"/>
   </target>
  
    
    
  

  
    <!-- Directories -->
   <property name="src.vol1" value="${src.dir}/volume1"/>
   <property name="build.vol1" value="${build.dir}/volume1"/><!-- Source file names -->
   <property name="vol1.main.src" value="vol1.xml"/>
   <property name="vol1.resolve.src" value="vol1-resolved.xml"/>
   <property name="vol1.postresolve.src" value="vol1-postresolved.xml"/>
   <property name="vol1.pdf.file" value="NISP-Vol1-v${src-version-major}${nisp.lifecycle.postfix}.pdf"/>
   <property name="vol1.rtf.file" value="NISP-Vol1-v${src-version-major}${nisp.lifecycle.postfix}.rtf"/>
   <property name="xsl-resolve-vol1" value="resolve.xsl"/>
   <target name="vol1" description="* Create Volume 1 in HTML5 and PDF" depends="vol1.html, vol1.pdf"/>
   <target name="vol1.resolve.check">
      <uptodate property="vol1-resolve.notRequired" targetfile="${build.resolve}/${vol1.resolve.src}">
         <srcfiles dir="${src.vol1}" includes="*.xml"/>
         <srcfiles dir="${xsl-styles.dir}/resolve" includes="${xsl-resolve-vol1}"/>
      </uptodate>
   </target>
   <target name="vol1.resolve" unless="vol1-resolve.notRequired" depends="init, vol1.resolve.check">
      <echo message="Resolve Volume 1"/>
      <java fork="yes" classname="${xslt.class}" dir="${src.vol1}">
         <arg line="${xslt.opts} -o ${build.resolve}/${vol1.resolve.src} ${src.vol1}/${vol1.main.src} ${xsl-styles.dir}/resolve/${xsl-resolve-vol1} docid=vol1 documentdir=volume1 use.show.indexterms=${use.show.indexterms} nisp.image.ext=${nisp.image.ext} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
         <jvmarg value="${use.sax}"/>
         <jvmarg value="${use.dom}"/>
         <jvmarg value="${use.xinc}"/>
      </java>
   </target>
   <target name="vol1-olinks.check" depends="init">
      <uptodate property="vol1-olinks.notRequired" targetfile="${src.dir}/olinks/vol1-target.db">
         <srcfiles dir="${build.resolve}" includes="${vol1.resolve.src}"/>
      </uptodate>
   </target>
   <target name="vol1.olinks" depends="init, vol1.resolve, vol1-olinks.check" unless="vol1-olinks.notRequired">
      <mkdir dir="${build.dir}/volume1"/>
      <java fork="yes" classname="${xslt.class}" dir="${build.vol1}">
         <arg line="${build.resolve}/${vol1.resolve.src} ${xsl-xhtml.dir}/${xsl-chunk} target.database.document=${src.dir}/olinks/olinksdb.xml current.docid=vol1 collect.xref.targets=only"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <move file="${build.vol1}/target.db" tofile="${src.dir}/olinks/vol1-target.db"/>
   </target>
   <target name="vol1.html.check" depends="init">
      <mkdir dir="${build.dir}/volume1"/>
      <uptodate property="vol1-html.notRequired" targetfile="${build.vol1}/index.html">
         <srcfiles dir="${build.resolve}" includes="${vol1.resolve.src}"/>
         <srcfiles dir="${xsl-styles.dir}" includes="${xsl-all-xhtml}"/>
      </uptodate>
   </target>
   <target name="vol1.html" description="* Create Volume 1 in HTML5" depends="svg, vol1.resolve, vol1.html.check" unless="vol1-html.notRequired">
      <echo message="Create Volume 1 as chunked HTML5 pages"/>
      <java fork="yes" classname="${xslt.class}">
         <arg line="${xslt.opts} -o ${build.resolve}/${vol1.postresolve.src} ${build.resolve}/${vol1.resolve.src} ${xsl-styles.dir}/resolve/postresolve-html.xsl"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <java fork="yes" classname="${xslt.class}" dir="${build.vol1}">
         <arg line="${xslt.opts} ${build.resolve}/${vol1.postresolve.src} ${xsl-xhtml.dir}/${xsl-chunk} ${nisp.lifecycle.opts} docid=vol1 pdf.prefix=NISP-Vol1 use.para.numbering=${use.para.numbering} datestamp=${DSTAMP} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
   </target>
   <target name="vol1.pdf.check" depends="init">
      <uptodate property="vol1-pdf.notRequired" targetfile="${build.fo}/${vol1.pdf.file}">
         <srcfiles dir="${build.resolve}" includes="${vol1.resolve.src}"/>
         <srcfiles dir="${xsl-styles.dir}" includes="${xsl-all-fo}"/>
      </uptodate>
   </target>
   <target name="vol1.pdf" description="* Create Volume 1 in PDF" depends="layout-fo, copy.svg, vol1.resolve, vol1.pdf.check" unless="vol1-pdf.notRequired">
      <echo message="Create Volume 1 print version"/>
      <java fork="yes" classname="${xslt.class}" dir="${build.fo}">
         <arg line="${xslt.opts} -o vol1.fo ${build.resolve}/${vol1.resolve.src} ${xsl-fo.dir}/${xsl-fo} ${nisp.lifecycle.opts} pdf.prefix=NISP-Vol1 use.para.numbering=${use.para.numbering} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <echo message="Transforming Volume 1.fo to PDF"/>
      <fop basedir="${build.fo}/" fofile="${build.fo}/vol1.fo" outfile="${build.fo}/${vol1.pdf.file}" format="application/pdf" messagelevel="${fop.message}" userconfig="${basedir}/lib/fop.xconf"/>
   </target>
  

  
    <!-- Directories -->
   <property name="src.vol2" value="${src.dir}/volume2"/>
   <property name="build.vol2" value="${build.dir}/volume2"/><!-- Source file names -->
   <property name="vol2.main.src" value="vol2.xml"/>
   <property name="vol2.resolve.src" value="vol2-resolved.xml"/>
   <property name="vol2.postresolve.src" value="vol2-postresolved.xml"/>
   <property name="vol2.pdf.file" value="NISP-Vol2-v${src-version-major}${nisp.lifecycle.postfix}.pdf"/>
   <property name="vol2.rtf.file" value="NISP-Vol2-v${src-version-major}${nisp.lifecycle.postfix}.rtf"/>
   <property name="xsl-resolve-vol2" value="resolve-nodes.xsl"/>
   <target name="vol2" description="* Create Volume 2 in HTML5 and PDF" depends="vol2.html, vol2.pdf"/>
   <target name="vol2.db-resolve.check">
      <uptodate property="vol2.db-resolve.notRequired" targetfile="${build.resolve}/resolved-standards.xml">
         <srcfiles includes="standards.xml" dir="${src.dir}/standards/"/>
         <srcfiles dir="${xsl-styles.dir}/resolve" includes="${xsl-resolve-db}"/>
      </uptodate>
   </target>
   <target name="vol2.db-resolve" depends="init, vol2.db-resolve.check" unless="vol2.db-resolve.notRequired">
      <echo message="Resolve Volume 2 DB"/>
      <java fork="yes" classname="${xslt.class}" dir="${src.vol2}">
         <arg line="${xslt.opts} -o ${build.resolve}/resolved-standards.xml ${src.dir}/standards/standards.xml ${xsl-styles.dir}/resolve/${xsl-resolve-db}"/>
         <classpath refid="lib-saxon-classpath"/>
         <jvmarg value="${use.sax}"/>
         <jvmarg value="${use.dom}"/>
         <jvmarg value="${use.xinc}"/>
      </java>
   </target>
   <target name="vol2.resolve.check">
      <uptodate property="vol2-resolve.notRequired" targetfile="${build.resolve}/${vol2.resolve.src}">
         <srcfiles dir="${src.vol2}" includes="*.xml"/>
         <srcfiles includes="resolved-standards.xml" dir="${build.resolve}/"/>
         <srcfiles dir="${xsl-styles.dir}/resolve" includes="${xsl-resolve-vol2}"/>
      </uptodate>
   </target>
   <target name="vol2.resolve" unless="vol2-resolve.notRequired" depends="init, vol2.db-resolve, vol2.resolve.check">
      <echo message="Resolve Volume 2"/>
      <java fork="yes" classname="${xslt.class}" dir="${src.vol2}">
         <arg line="${xslt.opts} -o ${build.resolve}/${vol2.resolve.src} ${src.vol2}/${vol2.main.src} ${xsl-styles.dir}/resolve/${xsl-resolve-vol2} dbname=resolved-standards.xml docid=vol2 documentdir=volume2 use.show.indexterms=${use.show.indexterms} nisp.image.ext=${nisp.image.ext} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
         <jvmarg value="${use.sax}"/>
         <jvmarg value="${use.dom}"/>
         <jvmarg value="${use.xinc}"/>
      </java>
   </target>
   <target name="vol2-olinks.check" depends="init">
      <uptodate property="vol2-olinks.notRequired" targetfile="${src.dir}/olinks/vol2-target.db">
         <srcfiles dir="${build.resolve}" includes="${vol2.resolve.src}"/>
         <srcfiles includes="standards.xml" dir="${src.dir}/standards/"/>
      </uptodate>
   </target>
   <target name="vol2.olinks" depends="init, vol2.resolve, vol2-olinks.check" unless="vol2-olinks.notRequired">
      <mkdir dir="${build.dir}/volume2"/>
      <java fork="yes" classname="${xslt.class}" dir="${build.vol2}">
         <arg line="${build.resolve}/${vol2.resolve.src} ${xsl-xhtml.dir}/${xsl-chunk} target.database.document=${src.dir}/olinks/olinksdb.xml current.docid=vol2 collect.xref.targets=only"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <move file="${build.vol2}/target.db" tofile="${src.dir}/olinks/vol2-target.db"/>
   </target>
   <target name="vol2.html.check" depends="init">
      <mkdir dir="${build.dir}/volume2"/>
      <uptodate property="vol2-html.notRequired" targetfile="${build.vol2}/index.html">
         <srcfiles dir="${build.resolve}" includes="${vol2.resolve.src}"/>
         <srcfiles dir="${xsl-styles.dir}" includes="${xsl-all-xhtml}"/>
      </uptodate>
   </target>
   <target name="vol2.html" description="* Create Volume 2 in HTML5" depends="svg, vol2.resolve, vol2.html.check" unless="vol2-html.notRequired">
      <echo message="Create Volume 2 as chunked HTML5 pages"/>
      <java fork="yes" classname="${xslt.class}">
         <arg line="${xslt.opts} -o ${build.resolve}/${vol2.postresolve.src} ${build.resolve}/${vol2.resolve.src} ${xsl-styles.dir}/resolve/postresolve-html.xsl"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <java fork="yes" classname="${xslt.class}" dir="${build.vol2}">
         <arg line="${xslt.opts} ${build.resolve}/${vol2.postresolve.src} ${xsl-xhtml.dir}/${xsl-chunk} ${nisp.lifecycle.opts} docid=vol2 pdf.prefix=NISP-Vol2 use.para.numbering=${use.para.numbering} datestamp=${DSTAMP} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
   </target>
   <target name="vol2.pdf.check" depends="init">
      <uptodate property="vol2-pdf.notRequired" targetfile="${build.fo}/${vol2.pdf.file}">
         <srcfiles dir="${build.resolve}" includes="${vol2.resolve.src}"/>
         <srcfiles dir="${xsl-styles.dir}" includes="${xsl-all-fo}"/>
      </uptodate>
   </target>
   <target name="vol2.pdf" description="* Create Volume 2 in PDF" depends="layout-fo, copy.svg, vol2.resolve, vol2.pdf.check" unless="vol2-pdf.notRequired">
      <echo message="Create Volume 2 print version"/>
      <java fork="yes" classname="${xslt.class}" dir="${build.fo}">
         <arg line="${xslt.opts} -o vol2.fo ${build.resolve}/${vol2.resolve.src} ${xsl-fo.dir}/${xsl-fo} ${nisp.lifecycle.opts} pdf.prefix=NISP-Vol2 use.para.numbering=${use.para.numbering} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <echo message="Transforming Volume 2.fo to PDF"/>
      <fop basedir="${build.fo}/" fofile="${build.fo}/vol2.fo" outfile="${build.fo}/${vol2.pdf.file}" format="application/pdf" messagelevel="${fop.message}" userconfig="${basedir}/lib/fop.xconf"/>
   </target>
  


  
    <!-- Directories -->
   <property name="src.vol3" value="${src.dir}/volume3"/>
   <property name="build.vol3" value="${build.dir}/volume3"/><!-- Source file names -->
   <property name="vol3.main.src" value="vol3.xml"/>
   <property name="vol3.resolve.src" value="vol3-resolved.xml"/>
   <property name="vol3.postresolve.src" value="vol3-postresolved.xml"/>
   <property name="vol3.pdf.file" value="NISP-Vol3-v${src-version-major}${nisp.lifecycle.postfix}.pdf"/>
   <property name="vol3.rtf.file" value="NISP-Vol3-v${src-version-major}${nisp.lifecycle.postfix}.rtf"/>
   <property name="xsl-resolve-vol3" value="resolve-nodes.xsl"/>
   <target name="vol3" description="* Create Volume 3 in HTML5 and PDF" depends="vol3.html, vol3.pdf"/>
   <target name="vol3.db-resolve.check">
      <uptodate property="vol3.db-resolve.notRequired" targetfile="${build.resolve}/resolved-standards.xml">
         <srcfiles includes="standards.xml" dir="${src.dir}/standards/"/>
         <srcfiles dir="${xsl-styles.dir}/resolve" includes="${xsl-resolve-db}"/>
      </uptodate>
   </target>
   <target name="vol3.db-resolve" depends="init, vol3.db-resolve.check" unless="vol3.db-resolve.notRequired">
      <echo message="Resolve Volume 3 DB"/>
      <java fork="yes" classname="${xslt.class}" dir="${src.vol3}">
         <arg line="${xslt.opts} -o ${build.resolve}/resolved-standards.xml ${src.dir}/standards/standards.xml ${xsl-styles.dir}/resolve/${xsl-resolve-db}"/>
         <classpath refid="lib-saxon-classpath"/>
         <jvmarg value="${use.sax}"/>
         <jvmarg value="${use.dom}"/>
         <jvmarg value="${use.xinc}"/>
      </java>
   </target>
   <target name="vol3.resolve.check">
      <uptodate property="vol3-resolve.notRequired" targetfile="${build.resolve}/${vol3.resolve.src}">
         <srcfiles dir="${src.vol3}" includes="*.xml"/>
         <srcfiles includes="resolved-standards.xml" dir="${build.resolve}/"/>
         <srcfiles dir="${xsl-styles.dir}/resolve" includes="${xsl-resolve-vol3}"/>
      </uptodate>
   </target>
   <target name="vol3.resolve" unless="vol3-resolve.notRequired" depends="init, vol3.db-resolve, vol3.resolve.check">
      <echo message="Resolve Volume 3"/>
      <java fork="yes" classname="${xslt.class}" dir="${src.vol3}">
         <arg line="${xslt.opts} -o ${build.resolve}/${vol3.resolve.src} ${src.vol3}/${vol3.main.src} ${xsl-styles.dir}/resolve/${xsl-resolve-vol3} dbname=resolved-standards.xml docid=vol3 documentdir=volume3 use.show.indexterms=${use.show.indexterms} nisp.image.ext=${nisp.image.ext} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
         <jvmarg value="${use.sax}"/>
         <jvmarg value="${use.dom}"/>
         <jvmarg value="${use.xinc}"/>
      </java>
   </target>
   <target name="vol3-olinks.check" depends="init">
      <uptodate property="vol3-olinks.notRequired" targetfile="${src.dir}/olinks/vol3-target.db">
         <srcfiles dir="${build.resolve}" includes="${vol3.resolve.src}"/>
         <srcfiles includes="standards.xml" dir="${src.dir}/standards/"/>
      </uptodate>
   </target>
   <target name="vol3.olinks" depends="init, vol3.resolve, vol3-olinks.check" unless="vol3-olinks.notRequired">
      <mkdir dir="${build.dir}/volume3"/>
      <java fork="yes" classname="${xslt.class}" dir="${build.vol3}">
         <arg line="${build.resolve}/${vol3.resolve.src} ${xsl-xhtml.dir}/${xsl-chunk} target.database.document=${src.dir}/olinks/olinksdb.xml current.docid=vol3 collect.xref.targets=only"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <move file="${build.vol3}/target.db" tofile="${src.dir}/olinks/vol3-target.db"/>
   </target>
   <target name="vol3.html.check" depends="init">
      <mkdir dir="${build.dir}/volume3"/>
      <uptodate property="vol3-html.notRequired" targetfile="${build.vol3}/index.html">
         <srcfiles dir="${build.resolve}" includes="${vol3.resolve.src}"/>
         <srcfiles dir="${xsl-styles.dir}" includes="${xsl-all-xhtml}"/>
      </uptodate>
   </target>
   <target name="vol3.html" description="* Create Volume 3 in HTML5" depends="svg, vol3.resolve, vol3.html.check" unless="vol3-html.notRequired">
      <echo message="Create Volume 3 as chunked HTML5 pages"/>
      <java fork="yes" classname="${xslt.class}">
         <arg line="${xslt.opts} -o ${build.resolve}/${vol3.postresolve.src} ${build.resolve}/${vol3.resolve.src} ${xsl-styles.dir}/resolve/postresolve-html.xsl"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <java fork="yes" classname="${xslt.class}" dir="${build.vol3}">
         <arg line="${xslt.opts} ${build.resolve}/${vol3.postresolve.src} ${xsl-xhtml.dir}/${xsl-chunk} ${nisp.lifecycle.opts} docid=vol3 pdf.prefix=NISP-Vol3 use.para.numbering=${use.para.numbering} datestamp=${DSTAMP} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
   </target>
   <target name="vol3.pdf.check" depends="init">
      <uptodate property="vol3-pdf.notRequired" targetfile="${build.fo}/${vol3.pdf.file}">
         <srcfiles dir="${build.resolve}" includes="${vol3.resolve.src}"/>
         <srcfiles dir="${xsl-styles.dir}" includes="${xsl-all-fo}"/>
      </uptodate>
   </target>
   <target name="vol3.pdf" description="* Create Volume 3 in PDF" depends="layout-fo, copy.svg, vol3.resolve, vol3.pdf.check" unless="vol3-pdf.notRequired">
      <echo message="Create Volume 3 print version"/>
      <java fork="yes" classname="${xslt.class}" dir="${build.fo}">
         <arg line="${xslt.opts} -o vol3.fo ${build.resolve}/${vol3.resolve.src} ${xsl-fo.dir}/${xsl-fo} ${nisp.lifecycle.opts} pdf.prefix=NISP-Vol3 use.para.numbering=${use.para.numbering} describe=${describe} nato-std-edition=${nato-std-edition} nato-std-version=${nato-std-version}"/>
         <classpath refid="lib-saxon-classpath"/>
      </java>
      <echo message="Transforming Volume 3.fo to PDF"/>
      <fop basedir="${build.fo}/" fofile="${build.fo}/vol3.fo" outfile="${build.fo}/${vol3.pdf.file}" format="application/pdf" messagelevel="${fop.message}" userconfig="${basedir}/lib/fop.xconf"/>
   </target>
  


</project>